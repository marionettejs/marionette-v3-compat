{"version":3,"sources":["marionette-v3-compat.min.js","/source/src/ApplicationWreqr.js","/source/src/bindEntityEvents.js","/source/src/childEvents.js","/source/src/utils/restoreFunction.js","/source/src/CollectionView.js","/source/src/CompositeView.js","/source/src/Controller.js","/source/src/deprecatedEvents.js","/source/src/getChildView.js","/source/src/ItemView.js","/source/src/LayoutView.js","/source/src/Module.js","/source/src/normalizeUi.js","/source/src/proxyFunctions.js","/source/src/Region.js","/source/src/RegionManager.js","/source/src/RegionShowEvent.js","/source/src/regionsOnApplication.js","/source/src/regionsOnView.js","/source/src/RegionStaticMethods.js","/source/src/templateHelpers.js","/source/src/triggerProxy.js","/source/src/viewOptions.js","/source/src/marionette-v3-compat.js"],"names":["global","factory","exports","module","require","define","amd","mnV3Compat","_","Marionette","Radio","Backbone","this","ApplicationWreqr","dep","deprecate","originalConstructor","Application","prototype","constructor","extend","_initV2Channel","apply","arguments","execute","commands","request","reqres","channelName","result","channel","__deprecateChannel","vent","channelOn","on","channelRequest","listenTo","Object","obj","bindEntityEvents","originalBind","bindEvents","originalUnbind","unbindEvents","context","entity","bindings","isFunction","call","unbindEntityEvents","bindEventsMixin","_len","length","args","Array","_key","concat","_len2","_key2","View","CollectionView","childEvents","_buildEventProxies","options","mergeOptions","_childViewEvents","_childViewTriggers","restoreFunction","privateFunction","publicFunction","deprecation","ClassName","original","_nodep","Events","triggerMethod","initRenderBuffer","_bufferedChildren","CompositeView","originalRenderTemp","_renderTemplate","Controller","slice","destroy","stopListening","deprecatedEvents","render:collection","render:template","name","isObject","each","value","key","getChildView","originalPublicGetChildView","restoredPublicGetChildView","ItemView","LayoutView","Module","Deferred","$","_initCallbacks","Callbacks","submodules","addInitializer","initializer","add","start","run","moduleNames","moduleDefinition","ModuleClass","getClass","toArray","unshift","create","_deferred","_callbacks","callback","contextOverride","promise","push","cb","ctx","then","resolve","reset","callbacks","moduleName","app","initialize","_setupInitializersAndFinalizers","startWithParent","_initializerCallbacks","addFinalizer","_finalizerCallbacks","_isInitialized","mod","stop","invoke","undefined","addDefinition","customArgs","_runModuleDefinition","definition","flatten","drop","split","moduleDefinitions","i","parentModule","_getModule","_addModuleDefinition","def","moduleClass","fn","_getDefine","_getStartWithParent","_addStartWithParent","swp","isUndefined","startWithParentIsConfigured","normalizeUi","normalizeUIString","uiString","ui","replace","r","normalizeUIKeys","hash","reduce","memo","val","normalizedKey","normalizeUIValues","properties","isString","isArray","pick","property","propertyVal","proxyFunctions","proxyGetOption","optionName","getOption","proxyBindEntityEvents","proxyUnbindEntityEvents","Region","originalShow","show","attachView","view","currentView","_parent","_ensureElement","_ensureView","isChangingView","RegionManager","_regions","addRegions","regionDefinitions","defaults","_getValue","isEmpty","regions","selector","addRegion","region","buildRegion","_store","get","getRegions","clone","removeRegion","_remove","removeRegions","emptyRegions","empty","_actAsCollection","object","listProperty","methods","method","list","values","actAsCollection","RegionShowEvent","getEventName","match","prefix","eventName","toUpperCase","regionTriggerMethod","_isShown","triggerMethodOn","children","v","_addChildView","splitter","trigger","isView","isRegion","methodName","_events","regionsOnApplication","_initializeRegions","_regionManager","getRegion","_region","getRegionManager","optionRegions","_initRegionManager","regionsOnView","_addRegion","regionShow","regionEmpty","regionReset","regionOn","newRegion","__deprecatedRegion","_removeRegion","initRegions","_initRegions","regionClass","add:region","remove:region","RegionStaticMethods","regionConfig","DefaultRegionClass","_buildRegionFromSelector","el","_buildRegionFromObject","_buildRegionFromRegionClass","Error","message","url","RegionClass","omit","templateHelpers","mixinTemplateContext","target","templateContext","mixinTemplateHelpers","triggerProxy","_triggerEventOnParentLayout","layoutView","_parentView","eventPrefix","prefixedEventName","triggerParent","viewOptions","marionetteV3Compat","opts","patches","mapObject","patch","DEV_MODE","VERSION","_warn","warn","_console","log","console","trace","params"],"mappings":"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","file":"marionette-v3-compat.min.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('underscore'), require('backbone.marionette'), require('backbone.radio'), require('backbone')) :\n  typeof define === 'function' && define.amd ? define(['underscore', 'backbone.marionette', 'backbone.radio', 'backbone'], factory) :\n  (global.mnV3Compat = factory(global._,global.Marionette,global.Radio,global.Backbone));\n}(this, function (_,Marionette,Radio,Backbone) { 'use strict';\n\n  _ = 'default' in _ ? _['default'] : _;\n  Marionette = 'default' in Marionette ? Marionette['default'] : Marionette;\n  Radio = 'default' in Radio ? Radio['default'] : Radio;\n  Backbone = 'default' in Backbone ? Backbone['default'] : Backbone;\n\n  function ApplicationWreqr () {\n\n    function dep() {\n      Marionette.deprecate('Global channels are deprecated.  Create your own Radio channels.');\n    }\n\n    var originalConstructor = Marionette.Application.prototype.constructor;\n\n    Marionette.Application = Marionette.Application.extend({\n      constructor: function constructor() {\n        this._initV2Channel();\n        originalConstructor.apply(this, arguments);\n      },\n\n      // Command execution, facilitated by Backbone.Wreqr.Commands\n      execute: function execute() {\n        this.commands.execute.apply(this.commands, arguments);\n      },\n\n      // Request/response, facilitated by Backbone.Wreqr.RequestResponse\n      request: function request() {\n        return this.reqres.request.apply(this.reqres, arguments);\n      },\n\n      _initV2Channel: function _initV2Channel() {\n        this.channelName = _.result(this, 'channelName') || 'global';\n        this.channel = _.result(this, 'channel') || Radio.channel(this.channelName);\n        this.channel.__deprecateChannel = true;\n        this.vent = this.channel;\n        this.reqres = this.channel;\n        this.commands = this.channel;\n\n        var channelOn = this.channel.on;\n\n        this.channel.on = function () {\n          dep();\n          return channelOn.apply(this, arguments);\n        };\n\n        var channelRequest = this.channel.request;\n\n        this.channel.request = function () {\n          dep();\n          return channelRequest.apply(this, arguments);\n        };\n\n        this.channel.execute = function () {\n          dep();\n          Marionette.deprecate('Channel commands are deprecated.  Use requests.');\n          return channelRequest.apply(this, arguments);\n        };\n\n        var listenTo = Marionette.Object.listenTo;\n\n        Marionette.Object.listenTo = function (obj) {\n          if (obj.__deprecateChannel) {\n            dep();\n          }\n          listenTo.apply(this, arguments);\n        };\n      }\n    });\n  }\n\n  function bindEntityEvents () {\n\n    var originalBind = Marionette.bindEvents;\n    var originalUnbind = Marionette.unbindEvents;\n\n    Marionette.bindEvents = function (context, entity, bindings) {\n      if (_.isFunction(bindings)) {\n        Marionette.deprecate('bindEvents no longer accepts bindings as a function in v3');\n        bindings = bindings.call(context);\n      }\n      return originalBind(context, entity, bindings);\n    };\n\n    Marionette.unbindEvents = function (context, entity, bindings) {\n      if (_.isFunction(bindings)) {\n        Marionette.deprecate('unbindEvents no longer accepts bindings as a function in v3');\n        bindings = bindings.call(context);\n      }\n      return originalUnbind(context, entity, bindings);\n    };\n\n    Marionette.bindEntityEvents = function (context, entity, bindings) {\n      Marionette.deprecate('bindEntityEvents has been renamed to bindEvents in v3.');\n      return Marionette.bindEvents(context, entity, bindings);\n    };\n\n    Marionette.unbindEntityEvents = function (context, entity, bindings) {\n      Marionette.deprecate('unbindEntityEvents renamed to unbindEvents in v3.');\n      return Marionette.unbindEvents(context, entity, bindings);\n    };\n\n    var bindEventsMixin = {\n      bindEntityEvents: function bindEntityEvents() {\n        Marionette.deprecate('bindEntityEvents has been renamed to bindEvents in v3.');\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return Marionette.bindEvents.apply(Marionette, [this].concat(args));\n      },\n      unbindEntityEvents: function unbindEntityEvents() {\n        Marionette.deprecate('unbindEntityEvents renamed to unbindEvents in v3.');\n\n        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        return Marionette.unbindEvents.apply(Marionette, [this].concat(args));\n      }\n    };\n\n    _.extend(Marionette.Object.prototype, bindEventsMixin);\n\n    _.extend(Marionette.View.prototype, bindEventsMixin);\n\n    _.extend(Marionette.CollectionView.prototype, bindEventsMixin);\n  }\n\n  function childEvents () {\n\n    // Cache `childViewEvents` and `childViewTriggers`\n    function _buildEventProxies() {\n      if (this.childEvents || this.options.childEvents) {\n        Marionette.deprecate('childEvents are deprecated. Use childViewEvents');\n        this.mergeOptions(this.options, ['childEvents']);\n        this._childViewEvents = _.result(this, 'childEvents');\n      } else {\n        this._childViewEvents = _.result(this, 'childViewEvents');\n      }\n\n      this._childViewTriggers = _.result(this, 'childViewTriggers');\n    }\n\n    _.extend(Marionette.View.prototype, {\n      _buildEventProxies: _buildEventProxies\n    });\n\n    _.extend(Marionette.CollectionView.prototype, {\n      _buildEventProxies: _buildEventProxies\n    });\n  }\n\n  function restoreFunction (privateFunction, publicFunction, deprecation, ClassName) {\n    var original = Marionette[ClassName].prototype[privateFunction];\n    var options = {};\n\n    options[privateFunction] = function () {\n      this._nodep = true;\n      return this[publicFunction].apply(this, arguments);\n    };\n\n    options[publicFunction] = function () {\n      if (this._nodep) {\n        this._nodep = false;\n      } else {\n        Marionette.deprecate(deprecation);\n      }\n      return original.apply(this, arguments);\n    };\n\n    _.extend(Marionette[ClassName].prototype, options);\n  }\n\n  function CollectionView () {\n\n    restoreFunction('_endBuffering', 'endBuffering', 'endBuffering is now private.', 'CollectionView');\n    restoreFunction('_startBuffering', 'startBuffering', 'startBuffering is now private.', 'CollectionView');\n    restoreFunction('_showCollection', 'showCollection', 'showCollection is now private.', 'CollectionView');\n    restoreFunction('_showEmptyView', 'showEmptyView', 'showEmptyView is now private.', 'CollectionView');\n    restoreFunction('_destroyEmptyView', 'destroyEmptyView', 'destroyEmptyView is now private.', 'CollectionView');\n    restoreFunction('_checkEmpty', 'checkEmpty', 'checkEmpty is now private.', 'CollectionView');\n    restoreFunction('_destroyChildren', 'destroyChildren', 'destroyChildren is now private.', 'CollectionView');\n    restoreFunction('_proxyChildEvents', 'proxyChildEvents', 'proxyChildEvents is now private.', 'CollectionView');\n    restoreFunction('_addChild', 'addChild', 'addChild is now private.', 'CollectionView');\n\n    var originalConstructor = Marionette.CollectionView.prototype.constructor;\n\n    _.extend(Marionette.CollectionView.prototype, {\n      constructor: function constructor() {\n        Backbone.Events.on.call(this, 'render:children', function () {\n          this.triggerMethod('render:collection', this);\n        });\n        Backbone.Events.on.call(this, 'before:render:children', function () {\n          this.triggerMethod('before:render:collection', this);\n        });\n        originalConstructor.apply(this, arguments);\n      },\n      initRenderBuffer: function initRenderBuffer() {\n        Marionette.deprecate('initRenderBuffer is now private.');\n        this._bufferedChildren = [];\n      }\n    });\n  }\n\n  function CompositeView () {\n\n    var originalRenderTemp = Marionette.CompositeView.prototype._renderTemplate;\n\n    _.extend(Marionette.CompositeView.prototype, {\n      _renderTemplate: function _renderTemplate() {\n        this.triggerMethod('before:render:template');\n        originalRenderTemp.apply(this, arguments);\n        this.triggerMethod('render:template');\n      }\n    });\n  }\n\n  function Controller () {\n    Marionette.Controller = Marionette.Object.extend({\n      constructor: function constructor(options) {\n        this.options = options || {};\n\n        var args = Array.prototype.slice.call(arguments);\n        args[0] = this.options;\n\n        Marionette.deprecate('Marionette.Controller is deprecated. Use Marionette.Object');\n        Marionette.Object.prototype.constructor.apply(this, args);\n      },\n\n\n      destroy: function destroy() {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        this.triggerMethod.apply(this, ['before:destroy'].concat(args));\n        this.triggerMethod.apply(this, ['destroy'].concat(args));\n        this.stopListening();\n\n        return this;\n      }\n    });\n  }\n\n  function deprecatedEvents () {\n    var deprecatedEvents = {\n      'render:collection': true,\n      'render:template': true\n    };\n\n    var dep = function dep(name) {\n      Marionette.deprecate(name + ' event is deprecated.');\n    };\n\n    var listenTo = Backbone.View.prototype.listenTo;\n\n    Backbone.View.prototype.listenTo = function (obj, name) {\n      if (deprecatedEvents[name]) {\n        dep(name);\n      }\n      if (_.isObject(name)) {\n        _.each(name, function (value, key) {\n          if (deprecatedEvents[key]) {\n            dep(key);\n          }\n        });\n      }\n      listenTo.apply(this, arguments);\n    };\n\n    var on = Backbone.View.prototype.on;\n\n    Backbone.View.prototype.on = function (name) {\n      if (deprecatedEvents[name]) {\n        dep(name);\n      }\n      if (_.isObject(name)) {\n        _.each(name, function (value, key) {\n          if (deprecatedEvents[key]) {\n            dep(key);\n          }\n        });\n      }\n      on.apply(this, arguments);\n    };\n  };\n\n  function getChildView () {\n\n    var originalPublicGetChildView = Marionette.View.prototype.getChildView;\n\n    restoreFunction('_getChildView', 'getChildView', 'getChildView is deprecated. Use childView instead.', 'CollectionView');\n    restoreFunction('_getEmptyView', 'getEmptyView', 'getEmptyView is deprecated. Use emptyView instead.', 'View');\n\n    var restoredPublicGetChildView = Marionette.View.prototype.getChildView;\n\n    Marionette.View = Marionette.View.extend({\n      getChildView: function getChildView() {\n        if (arguments.length) {\n          return originalPublicGetChildView.apply(this, arguments);\n        }\n\n        return restoredPublicGetChildView.apply(this, arguments);\n      }\n    });\n  }\n\n  function ItemView () {\n    Marionette.ItemView = Marionette.View.extend({\n      constructor: function constructor() {\n        Marionette.deprecate('Marionette.ItemView is deprecated. Use Marionette.View');\n        Marionette.View.prototype.constructor.apply(this, arguments);\n      }\n    });\n  }\n\n  function LayoutView () {\n    Marionette.LayoutView = Marionette.View.extend({\n      constructor: function constructor() {\n        Marionette.deprecate('Marionette.LayoutView is deprecated. Use Marionette.View');\n        Marionette.View.prototype.constructor.apply(this, arguments);\n      }\n    });\n  }\n\n  function Module () {\n\n    var originalConstructor = Marionette.Application.prototype.constructor;\n\n    Marionette.Deferred = function () {\n      Marionette.deprecate('Marionette.Deferred is deprecated and removed in v3.');\n      return Backbone.$.Deferred.apply(this, arguments);\n    };\n\n    Marionette.Application = Marionette.Application.extend({\n      constructor: function constructor() {\n        this._initCallbacks = new Marionette.Callbacks();\n        this.submodules = {};\n        originalConstructor.apply(this, arguments);\n      },\n\n      addInitializer: function addInitializer(initializer) {\n        Marionette.deprecate('Application Initializers are deprecated and removed in v3.');\n        this._initCallbacks.add(initializer);\n      },\n\n      start: function start(options) {\n        this.triggerMethod('before:start', options);\n        this._initCallbacks.run(options, this);\n        this.triggerMethod('start', options);\n      },\n\n      module: function module(moduleNames, moduleDefinition) {\n\n        // Overwrite the module class if the user specifies one\n        var ModuleClass = Marionette.Module.getClass(moduleDefinition);\n\n        var args = _.toArray(arguments);\n        args.unshift(this);\n\n        // see the Marionette.Module object for more information\n        return ModuleClass.create.apply(ModuleClass, args);\n      }\n    });\n\n    // Callbacks\n    // ---------\n\n    // A simple way of managing a collection of callbacks\n    // and executing them at a later point in time, using jQuery's\n    // `Deferred` object.\n    Marionette.Callbacks = function () {\n      this._deferred = Marionette.Deferred();\n      this._callbacks = [];\n    };\n\n    _.extend(Marionette.Callbacks.prototype, {\n\n      // Add a callback to be executed. Callbacks added here are\n      // guaranteed to execute, even if they are added after the\n      // `run` method is called.\n      add: function add(callback, contextOverride) {\n        var promise = _.result(this._deferred, 'promise');\n\n        this._callbacks.push({ cb: callback, ctx: contextOverride });\n\n        promise.then(function (args) {\n          if (contextOverride) {\n            args.context = contextOverride;\n          }\n          callback.call(args.context, args.options);\n        });\n      },\n\n      // Run all registered callbacks with the context specified.\n      // Additional callbacks can be added after this has been run\n      // and they will still be executed.\n      run: function run(options, context) {\n        this._deferred.resolve({\n          options: options,\n          context: context\n        });\n      },\n\n      // Resets the list of callbacks to be run, allowing the same list\n      // to be run multiple times - whenever the `run` method is called.\n      reset: function reset() {\n        var callbacks = this._callbacks;\n        this._deferred = Marionette.Deferred();\n        this._callbacks = [];\n\n        _.each(callbacks, function (cb) {\n          this.add(cb.cb, cb.ctx);\n        }, this);\n      }\n    });\n\n    // A simple module system, used to create privacy and encapsulation in\n    // Marionette applications\n    Marionette.Module = function (moduleName, app, options) {\n      Marionette.deprecate('Marionette.module is deprecated and removed in v3.');\n\n      this.moduleName = moduleName;\n      this.options = _.extend({}, this.options, options);\n      // Allow for a user to overide the initialize\n      // for a given module instance.\n      this.initialize = options.initialize || this.initialize;\n\n      // Set up an internal store for sub-modules.\n      this.submodules = {};\n\n      this._setupInitializersAndFinalizers();\n\n      // Set an internal reference to the app\n      // within a module.\n      this.app = app;\n\n      if (_.isFunction(this.initialize)) {\n        this.initialize(moduleName, app, this.options);\n      }\n    };\n\n    Marionette.Module.extend = Marionette.extend;\n\n    // Extend the Module prototype with events / listenTo, so that the module\n    // can be used as an event aggregator or pub/sub.\n    _.extend(Marionette.Module.prototype, Backbone.Events, {\n\n      // By default modules start with their parents.\n      startWithParent: true,\n\n      // Initialize is an empty function by default. Override it with your own\n      // initialization logic when extending Marionette.Module.\n      initialize: function initialize() {},\n\n      // Initializer for a specific module. Initializers are run when the\n      // module's `start` method is called.\n      addInitializer: function addInitializer(callback) {\n        this._initializerCallbacks.add(callback);\n      },\n\n      // Finalizers are run when a module is stopped. They are used to teardown\n      // and finalize any variables, references, events and other code that the\n      // module had set up.\n      addFinalizer: function addFinalizer(callback) {\n        this._finalizerCallbacks.add(callback);\n      },\n\n      // Start the module, and run all of its initializers\n      start: function start(options) {\n        // Prevent re-starting a module that is already started\n        if (this._isInitialized) {\n          return;\n        }\n\n        // start the sub-modules (depth-first hierarchy)\n        _.each(this.submodules, function (mod) {\n          // check to see if we should start the sub-module with this parent\n          if (mod.startWithParent) {\n            mod.start(options);\n          }\n        });\n\n        // run the callbacks to \"start\" the current module\n        this.triggerMethod('before:start', options);\n\n        this._initializerCallbacks.run(options, this);\n        this._isInitialized = true;\n\n        this.triggerMethod('start', options);\n      },\n\n      // Stop this module by running its finalizers and then stop all of\n      // the sub-modules for this module\n      stop: function stop() {\n        // if we are not initialized, don't bother finalizing\n        if (!this._isInitialized) {\n          return;\n        }\n        this._isInitialized = false;\n\n        this.triggerMethod('before:stop');\n\n        // stop the sub-modules; depth-first, to make sure the\n        // sub-modules are stopped / finalized before parents\n        _.invoke(this.submodules, 'stop');\n\n        // run the finalizers\n        this._finalizerCallbacks.run(undefined, this);\n\n        // reset the initializers and finalizers\n        this._initializerCallbacks.reset();\n        this._finalizerCallbacks.reset();\n\n        this.triggerMethod('stop');\n      },\n\n      // Configure the module with a definition function and any custom args\n      // that are to be passed in to the definition function\n      addDefinition: function addDefinition(moduleDefinition, customArgs) {\n        this._runModuleDefinition(moduleDefinition, customArgs);\n      },\n\n      // Internal method: run the module definition function with the correct\n      // arguments\n      _runModuleDefinition: function _runModuleDefinition(definition, customArgs) {\n        // If there is no definition short circut the method.\n        if (!definition) {\n          return;\n        }\n\n        // build the correct list of arguments for the module definition\n        var args = _.flatten([this, this.app, Backbone, Marionette, Backbone.$, _, customArgs]);\n\n        definition.apply(this, args);\n      },\n\n      // Internal method: set up new copies of initializers and finalizers.\n      // Calling this method will wipe out all existing initializers and\n      // finalizers.\n      _setupInitializersAndFinalizers: function _setupInitializersAndFinalizers() {\n        this._initializerCallbacks = new Marionette.Callbacks();\n        this._finalizerCallbacks = new Marionette.Callbacks();\n      },\n\n      // import the `triggerMethod` to trigger events with corresponding\n      // methods if the method exists\n      triggerMethod: function triggerMethod() {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return Marionette.triggerMethod.apply(this, [this].concat(args));\n      }\n    });\n\n    // Class methods to create modules\n    _.extend(Marionette.Module, {\n\n      // Create a module, hanging off the app parameter as the parent object.\n      create: function create(app, moduleNames, moduleDefinition) {\n        var module = app;\n\n        // get the custom args passed in after the module definition and\n        // get rid of the module name and definition function\n        var customArgs = _.drop(arguments, 3);\n\n        // Split the module names and get the number of submodules.\n        // i.e. an example module name of `Doge.Wow.Amaze` would\n        // then have the potential for 3 module definitions.\n        moduleNames = moduleNames.split('.');\n        var length = moduleNames.length;\n\n        // store the module definition for the last module in the chain\n        var moduleDefinitions = [];\n        moduleDefinitions[length - 1] = moduleDefinition;\n\n        // Loop through all the parts of the module definition\n        _.each(moduleNames, function (moduleName, i) {\n          var parentModule = module;\n          module = this._getModule(parentModule, moduleName, app, moduleDefinition);\n          this._addModuleDefinition(parentModule, module, moduleDefinitions[i], customArgs);\n        }, this);\n\n        // Return the last module in the definition chain\n        return module;\n      },\n\n      _getModule: function _getModule(parentModule, moduleName, app, def, args) {\n        var options = _.extend({}, def);\n        var ModuleClass = this.getClass(def);\n\n        // Get an existing module of this name if we have one\n        var module = parentModule[moduleName];\n\n        if (!module) {\n          // Create a new module if we don't have one\n          module = new ModuleClass(moduleName, app, options);\n          parentModule[moduleName] = module;\n          // store the module on the parent\n          parentModule.submodules[moduleName] = module;\n        }\n\n        return module;\n      },\n\n      // ## Module Classes\n      //\n      // Module classes can be used as an alternative to the define pattern.\n      // The extend function of a Module is identical to the extend functions\n      // on other Backbone and Marionette classes.\n      // This allows module lifecyle events like `onStart` and `onStop` to be called directly.\n      getClass: function getClass(moduleDefinition) {\n        var ModuleClass = Marionette.Module;\n\n        if (!moduleDefinition) {\n          return ModuleClass;\n        }\n\n        // If all of the module's functionality is defined inside its class,\n        // then the class can be passed in directly. `MyApp.module(\"Foo\", FooModule)`.\n        if (moduleDefinition.prototype instanceof ModuleClass) {\n          return moduleDefinition;\n        }\n\n        return moduleDefinition.moduleClass || ModuleClass;\n      },\n\n      // Add the module definition and add a startWithParent initializer function.\n      // This is complicated because module definitions are heavily overloaded\n      // and support an anonymous function, module class, or options object\n      _addModuleDefinition: function _addModuleDefinition(parentModule, module, def, args) {\n        var fn = this._getDefine(def);\n        var startWithParent = this._getStartWithParent(def, module);\n\n        if (fn) {\n          module.addDefinition(fn, args);\n        }\n\n        this._addStartWithParent(parentModule, module, startWithParent);\n      },\n\n      _getStartWithParent: function _getStartWithParent(def, module) {\n        var swp;\n\n        if (_.isFunction(def) && def.prototype instanceof Marionette.Module) {\n          swp = module.constructor.prototype.startWithParent;\n          return _.isUndefined(swp) ? true : swp;\n        }\n\n        if (_.isObject(def)) {\n          swp = def.startWithParent;\n          return _.isUndefined(swp) ? true : swp;\n        }\n\n        return true;\n      },\n\n      _getDefine: function _getDefine(def) {\n        if (_.isFunction(def) && !(def.prototype instanceof Marionette.Module)) {\n          return def;\n        }\n\n        if (_.isObject(def)) {\n          return def.define;\n        }\n\n        return null;\n      },\n\n      _addStartWithParent: function _addStartWithParent(parentModule, module, startWithParent) {\n        module.startWithParent = module.startWithParent && startWithParent;\n\n        if (!module.startWithParent || !!module.startWithParentIsConfigured) {\n          return;\n        }\n\n        module.startWithParentIsConfigured = true;\n\n        parentModule.addInitializer(function (options) {\n          if (module.startWithParent) {\n            module.start(options);\n          }\n        });\n      }\n    });\n  }\n\n  function normalizeUi () {\n\n    var normalizeUIString = function normalizeUIString(uiString, ui) {\n      return uiString.replace(/@ui\\.[a-zA-Z-_$0-9]*/g, function (r) {\n        return ui[r.slice(4)];\n      });\n    };\n\n    Marionette.normalizeUIString = function (uiString, ui) {\n      Marionette.deprecate('normalizeUIString was removed in v3.');\n      return normalizeUIString.apply(this, arguments);\n    };\n\n    var normalizeUIKeys = function normalizeUIKeys(hash, ui) {\n      return _.reduce(hash, function (memo, val, key) {\n        var normalizedKey = normalizeUIString(key, ui);\n        memo[normalizedKey] = val;\n        return memo;\n      }, {});\n    };\n\n    Marionette.normalizeUIKeys = function (hash, ui) {\n      Marionette.deprecate('normalizeUIKeys was removed in v3.');\n      return normalizeUIKeys.apply(this, arguments);\n    };\n\n    var normalizeUIValues = function normalizeUIValues(hash, ui, properties) {\n      _.each(hash, function (val, key) {\n        if (_.isString(val)) {\n          hash[key] = normalizeUIString(val, ui);\n        } else if (_.isObject(val) && _.isArray(properties)) {\n          _.extend(val, normalizeUIValues(_.pick(val, properties), ui));\n          /* Value is an object, and we got an array of embedded property names to normalize. */\n          _.each(properties, function (property) {\n            var propertyVal = val[property];\n            if (_.isString(propertyVal)) {\n              val[property] = normalizeUIString(propertyVal, ui);\n            }\n          });\n        }\n      });\n      return hash;\n    };\n\n    Marionette.normalizeUIValues = function (hash, ui, properties) {\n      Marionette.deprecate('normalizeUIValues was removed in v3.');\n      return normalizeUIValues.apply(this, arguments);\n    };\n  }\n\n  function proxyFunctions () {\n    Marionette.proxyGetOption = function (optionName) {\n      Marionette.deprecate('proxyGetOption has been deprecated and removed in v3.');\n      return Marionette.getOption(this, optionName);\n    };\n\n    Marionette.proxyBindEntityEvents = function (entity, bindings) {\n      Marionette.deprecate('proxyBindEntityEvents has been deprecated and removed in v3.');\n      return Marionette.bindEvents(this, entity, bindings);\n    };\n\n    Marionette.proxyUnbindEntityEvents = function (entity, bindings) {\n      Marionette.deprecate('proxyUnbindEntityEvents has been deprecated and removed in v3.');\n      return Marionette.unbindEvents(this, entity, bindings);\n    };\n  }\n\n  function Region () {\n\n    var originalShow = Marionette.Region.prototype.show;\n\n    Marionette.Region = Marionette.Region.extend({\n      attachView: function attachView(view) {\n        Marionette.deprecate('Region#attachView was removed in v3. Use Region#show without fear of re-rendering.');\n        if (this.currentView) {\n          delete this.currentView._parent;\n        }\n        view._parent = this;\n        this.currentView = view;\n        return this;\n      },\n      show: function show(view, options) {\n        if (!this._ensureElement(options)) {\n          return;\n        }\n        this._ensureView(view);\n        if (view === this.currentView) {\n          return this;\n        }\n        var isChangingView = !!this.currentView;\n        if (isChangingView) {\n          this.triggerMethod('before:swapOut', this.currentView, this, options);\n          this.triggerMethod('before:swap', view, this, options);\n          this.triggerMethod('swapOut', this.currentView, this, options);\n        }\n        originalShow.apply(this, arguments);\n        if (isChangingView) {\n          this.triggerMethod('swap', view, this, options);\n        }\n        return this;\n      }\n    });\n  }\n\n  function RegionManager () {\n\n    // Manage one or more related `Marionette.Region` objects.\n    Marionette.RegionManager = Marionette.Object.extend({\n      constructor: function constructor(options) {\n        this._regions = {};\n        this.length = 0;\n\n        Marionette.Object.call(this, options);\n\n        this.addRegions(this.getOption('regions'));\n      },\n\n      // Add multiple regions using an object literal or a\n      // function that returns an object literal, where\n      // each key becomes the region name, and each value is\n      // the region definition.\n      addRegions: function addRegions(regionDefinitions, defaults) {\n        regionDefinitions = Marionette._getValue(regionDefinitions, this, arguments);\n\n        if (!_.isEmpty(regionDefinitions)) {\n          Marionette.deprecate('RegionManager is deprecated and removed in v3.');\n        }\n\n        return _.reduce(regionDefinitions, function (regions, definition, name) {\n          if (_.isString(definition)) {\n            definition = { selector: definition };\n          }\n          if (definition.selector) {\n            definition = _.defaults({}, definition, defaults);\n          }\n\n          regions[name] = this.addRegion(name, definition);\n          return regions;\n        }, {}, this);\n      },\n\n      // Add an individual region to the region manager,\n      // and return the region instance\n      addRegion: function addRegion(name, definition) {\n        var region;\n\n        if (definition instanceof Marionette.Region) {\n          region = definition;\n        } else {\n          region = Marionette.Region.buildRegion(definition, Marionette.Region);\n        }\n\n        this.triggerMethod('before:add:region', name, region);\n\n        region._parent = this;\n        this._store(name, region);\n\n        this.triggerMethod('add:region', name, region);\n        return region;\n      },\n\n      // Get a region by name\n      get: function get(name) {\n        return this._regions[name];\n      },\n\n      // Gets all the regions contained within\n      // the `regionManager` instance.\n      getRegions: function getRegions() {\n        return _.clone(this._regions);\n      },\n\n      // Remove a region by name\n      removeRegion: function removeRegion(name) {\n        var region = this._regions[name];\n        this._remove(name, region);\n\n        return region;\n      },\n\n      // Empty all regions in the region manager, and\n      // remove them\n      removeRegions: function removeRegions() {\n        var regions = this.getRegions();\n        _.each(this._regions, function (region, name) {\n          this._remove(name, region);\n        }, this);\n\n        return regions;\n      },\n\n      // Empty all regions in the region manager, but\n      // leave them attached\n      emptyRegions: function emptyRegions() {\n        var regions = this.getRegions();\n        _.invoke(regions, 'empty');\n        return regions;\n      },\n\n      // Destroy all regions and shut down the region\n      // manager entirely\n      destroy: function destroy() {\n        this.removeRegions();\n        return Marionette.Object.prototype.destroy.apply(this, arguments);\n      },\n\n      // internal method to store regions\n      _store: function _store(name, region) {\n        if (!this._regions[name]) {\n          this.length++;\n        }\n\n        this._regions[name] = region;\n      },\n\n      // internal method to remove a region\n      _remove: function _remove(name, region) {\n        this.triggerMethod('before:remove:region', name, region);\n        region.empty();\n        region.stopListening();\n\n        delete region._parent;\n        delete this._regions[name];\n        this.length--;\n        this.triggerMethod('remove:region', name, region);\n      }\n    });\n\n    // Mix in methods from Underscore, for iteration, and other\n    // collection related features.\n    // Borrowing this code from Backbone.Collection:\n    // http://backbonejs.org/docs/backbone.html#section-121\n    var _actAsCollection = function _actAsCollection(object, listProperty) {\n      var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter', 'select', 'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke', 'toArray', 'first', 'initial', 'rest', 'last', 'without', 'isEmpty', 'pluck'];\n\n      _.each(methods, function (method) {\n        object[method] = function () {\n          var list = _.values(_.result(this, listProperty));\n          var args = [list].concat(_.toArray(arguments));\n          return _[method].apply(_, args);\n        };\n      });\n    };\n\n    Marionette.actAsCollection = function (object, listProperty) {\n      Marionette.deprecate('actAsCollection is deprecated and removed in v3.');\n\n      return _actAsCollection.apply(this, arguments);\n    };\n\n    _actAsCollection(Marionette.RegionManager.prototype, '_regions');\n  }\n\n  function RegionShowEvent () {\n\n    function dep() {\n      Marionette.deprecate('Show events are no longer triggered on the View.  User render or attach.');\n    }\n\n    var regionTriggerMethod = Marionette.Region.prototype.triggerMethod;\n\n    Marionette.Region.prototype.triggerMethod = function (name, region, view, options) {\n      var result;\n      if (name === 'before:show' || name === 'show') {\n        result = regionTriggerMethod.call(this, name, view, region, options);\n        if (!view._isShown) {\n          Marionette.triggerMethodOn(view, name, view, region, options);\n        }\n        if (name === 'show') {\n          view._isShown = true;\n        }\n        if (view.children) {\n          view.children.each(function (v) {\n            if (!v._isShown) {\n              Marionette.triggerMethodOn(v, name, v);\n            }\n            if (name === 'show') {\n              v._isShown = true;\n            }\n          });\n        }\n      } else {\n        result = regionTriggerMethod.apply(this, arguments);\n      }\n\n      return result;\n    };\n\n    var _addChildView = Marionette.CollectionView.prototype._addChildView;\n\n    Marionette.CollectionView.prototype._addChildView = function (view) {\n      _addChildView.apply(this, arguments);\n      if (this._isShown) {\n        if (!view._isShown) {\n          Marionette.triggerMethodOn(view, 'before:show', view);Marionette.triggerMethodOn(view, 'show', view);\n        }\n        view._isShown = true;\n      }\n    };\n\n    // split the event name on the \":\"\n    var splitter = /(^|:)(\\w)/gi;\n\n    // take the event section (\"section1:section2:section3\")\n    // and turn it in to uppercase name onSection1Section2Section3\n    function getEventName(match, prefix, eventName) {\n      return eventName.toUpperCase();\n    }\n\n    var trigger = Backbone.Events.trigger;\n\n    Backbone.Events.trigger = function (name) {\n      var isView = this.prototype instanceof Backbone.View || this === Backbone.View;\n      var isRegion = this.prototype instanceof Marionette.Region || this === Marionette.Region;\n      if (isView || isRegion) {\n        var methodName = 'on' + name.replace(splitter, getEventName);\n        var method = this.options && this.options[methodName] || this[methodName];\n\n        if (_.isFunction(method)) {\n          if (isView) {\n            dep();\n          } else {\n            if (method.length > 1) {\n              Marionette.deprecate('Region show events in v3 pass the region and the 1st argument and the view as the 2nd');\n            }\n          }\n        }\n\n        if (!this._events) {\n          return this;\n        }\n\n        if ((name === 'before:show' || name === 'show') && this._events[name]) {\n          if (isView) {\n            dep();\n          } else {\n            if (this._events[name].length > 1) {\n              Marionette.deprecate('Region show events in v3 pass the region and the 1st argument and the view as the 2nd');\n            }\n          }\n        }\n      }\n\n      return trigger.apply(this, arguments);\n    };\n  }\n\n  function regionsOnApplication () {\n\n    function dep() {\n      Marionette.deprecate('Regions attached to the Application are deprecated. Application now only has a single region.');\n    }\n\n    var originalConstructor = Marionette.Application.prototype.constructor;\n\n    Marionette.Application = Marionette.Application.extend({\n      constructor: function constructor(options) {\n        this._initializeRegions(options);\n        originalConstructor.apply(this, arguments);\n      },\n\n      // Add regions to your app.\n      // Accepts a hash of named strings or Region objects\n      // addRegions({something: \"#someRegion\"})\n      // addRegions({something: Region.extend({el: \"#someRegion\"}) });\n      addRegions: function addRegions(regions) {\n        return this._regionManager.addRegions(regions);\n      },\n\n      // Empty all regions in the app, without removing them\n      emptyRegions: function emptyRegions() {\n        return this._regionManager.emptyRegions();\n      },\n\n      // Removes a region from your app, by name\n      // Accepts the regions name\n      // removeRegion('myRegion')\n      removeRegion: function removeRegion(region) {\n        return this._regionManager.removeRegion(region);\n      },\n\n      // Provides alternative access to regions\n      // Accepts the region name\n      // getRegion('main')\n      getRegion: function getRegion(region) {\n        if (arguments.length) {\n          dep();\n          return this._regionManager.get(region);\n        }\n\n        return this._region;\n      },\n\n      // Get all the regions from the region manager\n      getRegions: function getRegions() {\n        return this._regionManager.getRegions();\n      },\n\n      // Enable easy overriding of the default `RegionManager`\n      // for customized region interactions and business-specific\n      // view logic for better control over single regions.\n      getRegionManager: function getRegionManager() {\n        return new Marionette.RegionManager();\n      },\n\n      // Internal method to initialize the regions that have been defined in a\n      // `regions` attribute on the application instance\n      _initializeRegions: function _initializeRegions() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        var regions = _.isFunction(this.regions) ? this.regions(options) : this.regions || {};\n\n        // Enable users to define `regions` in instance options.\n        var optionRegions = options.options && options.options.regions || options.regions;\n\n        // Enable region options to be a function\n        if (_.isFunction(optionRegions)) {\n          optionRegions = optionRegions.call(this, options);\n        }\n\n        // Overwrite current regions with those passed in options\n        _.extend(regions, optionRegions);\n\n        this._initRegionManager();\n\n        if (!_.isEmpty(regions)) {\n          dep();\n\n          this.addRegions(regions);\n        }\n\n        return this;\n      },\n\n      // Internal method to set up the region manager\n      _initRegionManager: function _initRegionManager() {\n        this._regionManager = this.getRegionManager();\n        this._regionManager._parent = this;\n\n        this.listenTo(this._regionManager, 'before:add:region', function (name, region) {\n          this.triggerMethod('before:add:region', name, region);\n        });\n\n        this.listenTo(this._regionManager, 'add:region', function (name, region) {\n          this[name] = region;\n          this.triggerMethod('add:region', name, region);\n        });\n\n        this.listenTo(this._regionManager, 'before:remove:region', function (name, region) {\n          this.triggerMethod('before:remove:region', name, region);\n        });\n\n        this.listenTo(this._regionManager, 'remove:region', function (name, region) {\n          delete this[name];\n          this.triggerMethod('remove:region', name, region);\n        });\n      }\n    });\n  }\n\n  function regionsOnView () {\n\n    function dep() {\n      Marionette.deprecate('Regions attached to the view are deprecated. Use View#getRegion or View#showChildView');\n    }\n\n    function _addRegion(view, name, region) {\n      var regionShow = region.show;\n      var regionEmpty = region.empty;\n      var regionReset = region.reset;\n      var regionOn = region.on;\n\n      var newRegion = _.extend({}, region, {\n        on: function on() {\n          dep();\n          regionOn.apply(this, arguments);\n        },\n        show: function show() {\n          dep();\n          regionShow.apply(this, arguments);\n        },\n        empty: function empty() {\n          dep();\n          regionEmpty.apply(this, arguments);\n        },\n        reset: function reset() {\n          dep();\n          regionReset.apply(this, arguments);\n        },\n\n        __deprecatedRegion: true\n      });\n\n      view[name] = newRegion;\n    }\n\n    function _removeRegion(view, name, region) {\n      delete view[name];\n    }\n\n    var listenTo = Backbone.View.prototype.listenTo;\n\n    Backbone.View.prototype.listenTo = function (obj) {\n      if (obj.__deprecatedRegion) {\n        dep();\n      }\n      listenTo.apply(this, arguments);\n    };\n\n    var initRegions = Marionette.View.prototype._initRegions;\n\n    _.extend(Marionette.View.prototype, {\n      _initRegions: function _initRegions() {\n        this.regionClass = Marionette.Region;\n        this.on({\n          'add:region': _addRegion,\n          'remove:region': _removeRegion\n        });\n        initRegions.apply(this, arguments);\n      }\n    });\n  }\n\n  function RegionStaticMethods () {\n\n    _.extend(Marionette.Region, {\n\n      buildRegion: function buildRegion(regionConfig, DefaultRegionClass) {\n\n        Marionette.deprecate('Region Static Options are deprecated and removed in v3.');\n\n        if (_.isString(regionConfig)) {\n          return this._buildRegionFromSelector(regionConfig, DefaultRegionClass);\n        }\n\n        if (regionConfig.selector || regionConfig.el || regionConfig.regionClass) {\n          return this._buildRegionFromObject(regionConfig, DefaultRegionClass);\n        }\n\n        if (_.isFunction(regionConfig)) {\n          return this._buildRegionFromRegionClass(regionConfig);\n        }\n\n        throw new Marionette.Error({\n          message: 'Improper region configuration type.',\n          url: 'marionette.region.html#region-configuration-types'\n        });\n      },\n\n      // Build the region from a string selector like '#foo-region'\n      _buildRegionFromSelector: function _buildRegionFromSelector(selector, DefaultRegionClass) {\n        return new DefaultRegionClass({ el: selector });\n      },\n\n      // Build the region from a configuration object\n      // ```js\n      // { selector: '#foo', regionClass: FooRegion, allowMissingEl: false }\n      // ```\n      _buildRegionFromObject: function _buildRegionFromObject(regionConfig, DefaultRegionClass) {\n        var RegionClass = regionConfig.regionClass || DefaultRegionClass;\n        var options = _.omit(regionConfig, 'selector', 'regionClass');\n\n        if (regionConfig.selector && !options.el) {\n          options.el = regionConfig.selector;\n        }\n\n        return new RegionClass(options);\n      },\n\n      // Build the region directly from a given `RegionClass`\n      _buildRegionFromRegionClass: function _buildRegionFromRegionClass(RegionClass) {\n        return new RegionClass();\n      }\n    });\n  }\n\n  function templateHelpers () {\n    function mixinTemplateContext() {\n      var target = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n      if (this.templateHelpers || this.options.templateHelpers) {\n        Marionette.deprecate('templateHelpers are deprecated. Use templateContext');\n        this.mergeOptions(this.options, ['templateHelpers']);\n        var templateHelpers = _.result(this, 'templateHelpers');\n        return _.extend(target, templateHelpers);\n      }\n\n      var templateContext = _.result(this, 'templateContext');\n      return _.extend(target, templateContext);\n    }\n\n    function mixinTemplateHelpers() {\n      Marionette.deprecate('mixinTemplateHelpers was renamed mixinTemplateContext in v3.');\n      mixinTemplateContext.apply(this, arguments);\n    }\n\n    _.extend(Marionette.View.prototype, {\n      mixinTemplateContext: mixinTemplateContext,\n      mixinTemplateHelpers: mixinTemplateHelpers\n    });\n\n    _.extend(Marionette.CompositeView.prototype, {\n      mixinTemplateContext: mixinTemplateContext,\n      mixinTemplateHelpers: mixinTemplateHelpers\n    });\n  }\n\n  function triggerProxy () {\n\n    // split the event name on the \":\"\n    var splitter = /(^|:)(\\w)/gi;\n\n    // take the event section (\"section1:section2:section3\")\n    // and turn it in to uppercase name onSection1Section2Section3\n    function getEventName(match, prefix, eventName) {\n      return eventName.toUpperCase();\n    }\n\n    var triggerParent = Marionette.View.prototype._triggerEventOnParentLayout;\n\n    function _triggerEventOnParentLayout(eventName) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var layoutView = this._parentView();\n      if (!layoutView) {\n        return;\n      }\n\n      args = args || [];\n\n      var eventPrefix = _.result(layoutView, 'childViewEventPrefix');\n      var prefixedEventName = eventPrefix + ':' + eventName;\n\n      var methodName = 'on' + prefixedEventName.replace(splitter, getEventName);\n      var method = layoutView.options && layoutView.options[methodName] || layoutView[methodName];\n\n      // If this is true we expect that it is expecting `this`\n      // as its first argument\n      if ((_.isFunction(method) && method.length) === args.length + 1 || (layoutView._events && layoutView._events[prefixedEventName] && layoutView._events[prefixedEventName].length) === args.length + 1) {\n        args = [this].concat(args);\n        Marionette.deprecate('The triggering view is no longer prepended on to the arguments of proxied child events.');\n      }\n\n      return triggerParent.apply(this, [eventName].concat(args));\n    }\n\n    _.extend(Marionette.View.prototype, {\n      _triggerEventOnParentLayout: _triggerEventOnParentLayout\n    });\n\n    _.extend(Marionette.CompositeView.prototype, {\n      _triggerEventOnParentLayout: _triggerEventOnParentLayout\n    });\n  }\n\n  function viewOptions () {\n\n    var originalConstructor = Marionette.View.prototype.constructor;\n\n    Marionette.View = Marionette.View.extend({\n      constructor: function constructor(options) {\n        var args = Array.prototype.slice.call(arguments);\n\n        if (_.isFunction(options)) {\n          Marionette.deprecate('Marionette.View options is no longer supported as a function. Please use an object instead.');\n          options = options();\n          args[0] = options;\n        }\n\n        originalConstructor.apply(this, args);\n      }\n    });\n  };\n\n  Marionette.DEV_MODE = true;\n  Marionette.VERSION = 'marionette-v3-compat';\n\n  // Add a console.trace to the deprecate message\n  Marionette.deprecate._warn = function () {\n    var warn = Marionette.deprecate._console.warn || Marionette.deprecate._console.log || function () {};\n    console.trace();\n    return warn.apply(Marionette.deprecate._console, arguments);\n  };\n\n  Marionette._getValue = function (value, context, params) {\n    if (_.isFunction(value)) {\n      value = params ? value.apply(context, params) : value.call(context);\n    }\n    return value;\n  };\n\n  function marionetteV3Compat () {\n    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    var patches = _.extend({\n      ApplicationWreqr: ApplicationWreqr,\n      bindEntityEvents: bindEntityEvents,\n      childEvents: childEvents,\n      CollectionView: CollectionView,\n      CompositeView: CompositeView,\n      Controller: Controller,\n      deprecatedEvents: deprecatedEvents,\n      getChildView: getChildView,\n      ItemView: ItemView,\n      LayoutView: LayoutView,\n      Module: Module,\n      normalizeUi: normalizeUi,\n      proxyFunctions: proxyFunctions,\n      Region: Region,\n      RegionManager: RegionManager,\n      RegionShowEvent: RegionShowEvent,\n      regionsOnApplication: regionsOnApplication,\n      regionsOnView: regionsOnView,\n      RegionStaticMethods: RegionStaticMethods,\n      templateHelpers: templateHelpers,\n      triggerProxy: triggerProxy,\n      viewOptions: viewOptions\n    }, opts);\n\n    _.mapObject(patches, function (patch) {\n      if (_.isFunction(patch)) {\n        patch();\n      }\n    });\n  }\n\n  return marionetteV3Compat;\n\n}));\n\n//# sourceMappingURL=marionette-v3-compat.js.map\n","import _ from 'underscore';\nimport Radio from 'backbone.radio';\nimport Marionette from 'backbone.marionette';\n\nexport default function() {\n\n  function dep() {\n    Marionette.deprecate('Global channels are deprecated.  Create your own Radio channels.');\n  }\n\n  const originalConstructor = Marionette.Application.prototype.constructor;\n\n  Marionette.Application = Marionette.Application.extend({\n    constructor: function() {\n      this._initV2Channel();\n      originalConstructor.apply(this, arguments);\n    },\n\n    // Command execution, facilitated by Backbone.Wreqr.Commands\n    execute: function() {\n      this.commands.execute.apply(this.commands, arguments);\n    },\n\n    // Request/response, facilitated by Backbone.Wreqr.RequestResponse\n    request: function() {\n      return this.reqres.request.apply(this.reqres, arguments);\n    },\n\n    _initV2Channel: function() {\n      this.channelName = _.result(this, 'channelName') || 'global';\n      this.channel = _.result(this, 'channel') || Radio.channel(this.channelName);\n      this.channel.__deprecateChannel = true;\n      this.vent = this.channel;\n      this.reqres = this.channel;\n      this.commands = this.channel;\n\n      const channelOn = this.channel.on;\n\n      this.channel.on = function() {\n        dep();\n        return channelOn.apply(this, arguments);\n      };\n\n      const channelRequest = this.channel.request;\n\n      this.channel.request = function() {\n        dep();\n        return channelRequest.apply(this, arguments);\n      };\n\n      this.channel.execute = function() {\n        dep();\n        Marionette.deprecate('Channel commands are deprecated.  Use requests.');\n        return channelRequest.apply(this, arguments);\n      };\n\n      const listenTo = Marionette.Object.listenTo;\n\n      Marionette.Object.listenTo = function(obj) {\n        if (obj.__deprecateChannel) { dep(); }\n        listenTo.apply(this, arguments);\n      };\n    }\n  });\n}\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\n\nexport default function() {\n\n  var originalBind = Marionette.bindEvents;\n  var originalUnbind = Marionette.unbindEvents;\n\n  Marionette.bindEvents = function(context, entity, bindings) {\n    if (_.isFunction(bindings)) {\n      Marionette.deprecate('bindEvents no longer accepts bindings as a function in v3');\n      bindings = bindings.call(context);\n    }\n    return originalBind(context, entity, bindings);\n  };\n\n  Marionette.unbindEvents = function(context, entity, bindings) {\n    if (_.isFunction(bindings)) {\n      Marionette.deprecate('unbindEvents no longer accepts bindings as a function in v3');\n      bindings = bindings.call(context);\n    }\n    return originalUnbind(context, entity, bindings);\n  };\n\n  Marionette.bindEntityEvents = function(context, entity, bindings) {\n    Marionette.deprecate('bindEntityEvents has been renamed to bindEvents in v3.');\n    return Marionette.bindEvents(context, entity, bindings);\n  };\n\n  Marionette.unbindEntityEvents = function(context, entity, bindings) {\n    Marionette.deprecate('unbindEntityEvents renamed to unbindEvents in v3.');\n    return Marionette.unbindEvents(context, entity, bindings);\n  };\n\n  const bindEventsMixin = {\n    bindEntityEvents(...args) {\n      Marionette.deprecate('bindEntityEvents has been renamed to bindEvents in v3.');\n      return Marionette.bindEvents(this, ...args);\n    },\n    unbindEntityEvents(...args) {\n      Marionette.deprecate('unbindEntityEvents renamed to unbindEvents in v3.');\n      return Marionette.unbindEvents(this, ...args);\n\n    }\n  };\n\n  _.extend(Marionette.Object.prototype, bindEventsMixin);\n\n  _.extend(Marionette.View.prototype, bindEventsMixin);\n\n  _.extend(Marionette.CollectionView.prototype, bindEventsMixin);\n}\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\n\nexport default function() {\n\n  // Cache `childViewEvents` and `childViewTriggers`\n  function _buildEventProxies() {\n    if (this.childEvents || this.options.childEvents) {\n      Marionette.deprecate('childEvents are deprecated. Use childViewEvents');\n      this.mergeOptions(this.options, ['childEvents']);\n      this._childViewEvents = _.result(this, 'childEvents');\n    } else {\n      this._childViewEvents = _.result(this, 'childViewEvents');\n    }\n\n    this._childViewTriggers = _.result(this, 'childViewTriggers');\n  }\n\n  _.extend(Marionette.View.prototype, {\n    _buildEventProxies\n  });\n\n  _.extend(Marionette.CollectionView.prototype, {\n    _buildEventProxies\n  });\n}\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\n\nexport default function(privateFunction, publicFunction, deprecation, ClassName) {\n  const original = Marionette[ClassName].prototype[privateFunction];\n  const options = {};\n\n  options[privateFunction] = function() {\n    this._nodep = true;\n    return this[publicFunction].apply(this, arguments);\n  }\n\n  options[publicFunction] = function() {\n    if (this._nodep) {\n      this._nodep = false;\n    } else {\n      Marionette.deprecate(deprecation);\n    }\n    return original.apply(this, arguments);\n  }\n\n  _.extend(Marionette[ClassName].prototype, options);\n}\n","import _ from 'underscore';\nimport Backbone from 'backbone';\nimport Marionette from 'backbone.marionette';\nimport restoreFunction from './utils/restoreFunction';\nexport default function() {\n\n  restoreFunction('_endBuffering', 'endBuffering', 'endBuffering is now private.', 'CollectionView');\n  restoreFunction('_startBuffering', 'startBuffering', 'startBuffering is now private.', 'CollectionView');\n  restoreFunction('_showCollection', 'showCollection', 'showCollection is now private.', 'CollectionView');\n  restoreFunction('_showEmptyView', 'showEmptyView', 'showEmptyView is now private.', 'CollectionView');\n  restoreFunction('_destroyEmptyView', 'destroyEmptyView', 'destroyEmptyView is now private.', 'CollectionView');\n  restoreFunction('_checkEmpty', 'checkEmpty', 'checkEmpty is now private.', 'CollectionView');\n  restoreFunction('_destroyChildren', 'destroyChildren', 'destroyChildren is now private.', 'CollectionView');\n  restoreFunction('_proxyChildEvents', 'proxyChildEvents', 'proxyChildEvents is now private.', 'CollectionView');\n  restoreFunction('_addChild', 'addChild', 'addChild is now private.', 'CollectionView');\n\n  const originalConstructor = Marionette.CollectionView.prototype.constructor;\n\n  _.extend(Marionette.CollectionView.prototype, {\n    constructor() {\n      Backbone.Events.on.call(this, 'render:children', function() { this.triggerMethod('render:collection', this); });\n      Backbone.Events.on.call(this, 'before:render:children', function() { this.triggerMethod('before:render:collection', this); });\n      originalConstructor.apply(this, arguments);\n    },\n    initRenderBuffer() {\n      Marionette.deprecate('initRenderBuffer is now private.');\n      this._bufferedChildren = [];\n    }\n  });\n}\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\nexport default function() {\n\n\n  const originalRenderTemp = Marionette.CompositeView.prototype._renderTemplate;\n\n  _.extend(Marionette.CompositeView.prototype, {\n    _renderTemplate() {\n      this.triggerMethod('before:render:template');\n      originalRenderTemp.apply(this, arguments);\n      this.triggerMethod('render:template');\n    }\n  });\n}\n","import Marionette from 'backbone.marionette';\n\nexport default function() {\n  Marionette.Controller = Marionette.Object.extend({\n    constructor(options) {\n      this.options = options || {};\n\n      const args = Array.prototype.slice.call(arguments);\n      args[0] = this.options;\n\n      Marionette.deprecate('Marionette.Controller is deprecated. Use Marionette.Object');\n      Marionette.Object.prototype.constructor.apply(this, args);\n    },\n\n    destroy: function(...args) {\n      this.triggerMethod('before:destroy', ...args);\n      this.triggerMethod('destroy', ...args);\n      this.stopListening();\n\n      return this;\n    }\n  });\n}\n","import _ from 'underscore';\nimport Backbone from 'backbone';\nimport Marionette from 'backbone.marionette';\n\nexport default function() {\n  const deprecatedEvents = {\n    'render:collection': true,\n    'render:template': true\n  };\n\n  const dep = function(name) {\n    Marionette.deprecate(`${ name } event is deprecated.`);\n  }\n\n  const listenTo = Backbone.View.prototype.listenTo;\n\n  Backbone.View.prototype.listenTo = function(obj, name) {\n    if (deprecatedEvents[name]) { dep(name); }\n    if (_.isObject(name)) {\n      _.each(name, function(value, key) {\n        if (deprecatedEvents[key]) { dep(key); }\n      });\n    }\n    listenTo.apply(this, arguments);\n  }\n\n  const on = Backbone.View.prototype.on;\n\n  Backbone.View.prototype.on = function(name) {\n    if (deprecatedEvents[name]) { dep(name); }\n    if (_.isObject(name)) {\n      _.each(name, function(value, key) {\n        if (deprecatedEvents[key]) { dep(key); }\n      });\n    }\n    on.apply(this, arguments);\n  }\n};\n","import Marionette from 'backbone.marionette';\nimport restoreFunction from './utils/restoreFunction';\n\nexport default function() {\n\n  const originalPublicGetChildView = Marionette.View.prototype.getChildView;\n\n  restoreFunction('_getChildView', 'getChildView', 'getChildView is deprecated. Use childView instead.', 'CollectionView');\n  restoreFunction('_getEmptyView', 'getEmptyView', 'getEmptyView is deprecated. Use emptyView instead.', 'View');\n\n  const restoredPublicGetChildView = Marionette.View.prototype.getChildView;\n\n  Marionette.View = Marionette.View.extend({\n    getChildView() {\n      if (arguments.length) {\n        return originalPublicGetChildView.apply(this, arguments);\n      }\n\n      return restoredPublicGetChildView.apply(this, arguments);\n    }\n  });\n}\n","import Marionette from 'backbone.marionette';\n\nexport default function() {\n  Marionette.ItemView = Marionette.View.extend({\n    constructor() {\n      Marionette.deprecate('Marionette.ItemView is deprecated. Use Marionette.View');\n      Marionette.View.prototype.constructor.apply(this, arguments);\n    }\n  });\n}\n","import Marionette from 'backbone.marionette';\n\nexport default function() {\n  Marionette.LayoutView = Marionette.View.extend({\n    constructor() {\n      Marionette.deprecate('Marionette.LayoutView is deprecated. Use Marionette.View');\n      Marionette.View.prototype.constructor.apply(this, arguments);\n    }\n  });\n}\n","import _ from 'underscore';\nimport Backbone from 'backbone';\nimport Marionette from 'backbone.marionette';\n\nexport default function() {\n\n  const originalConstructor = Marionette.Application.prototype.constructor;\n\n  Marionette.Deferred = function() {\n    Marionette.deprecate('Marionette.Deferred is deprecated and removed in v3.');\n    return Backbone.$.Deferred.apply(this, arguments);\n  };\n\n  Marionette.Application = Marionette.Application.extend({\n    constructor: function() {\n      this._initCallbacks = new Marionette.Callbacks();\n      this.submodules = {};\n      originalConstructor.apply(this, arguments);\n    },\n\n    addInitializer: function(initializer) {\n      Marionette.deprecate('Application Initializers are deprecated and removed in v3.');\n      this._initCallbacks.add(initializer);\n    },\n\n    start: function(options) {\n      this.triggerMethod('before:start', options);\n      this._initCallbacks.run(options, this);\n      this.triggerMethod('start', options);\n    },\n\n    module: function(moduleNames, moduleDefinition) {\n\n      // Overwrite the module class if the user specifies one\n      var ModuleClass = Marionette.Module.getClass(moduleDefinition);\n\n      var args = _.toArray(arguments);\n      args.unshift(this);\n\n      // see the Marionette.Module object for more information\n      return ModuleClass.create.apply(ModuleClass, args);\n    }\n  });\n\n\n  // Callbacks\n  // ---------\n\n  // A simple way of managing a collection of callbacks\n  // and executing them at a later point in time, using jQuery's\n  // `Deferred` object.\n  Marionette.Callbacks = function() {\n    this._deferred = Marionette.Deferred();\n    this._callbacks = [];\n  };\n\n  _.extend(Marionette.Callbacks.prototype, {\n\n    // Add a callback to be executed. Callbacks added here are\n    // guaranteed to execute, even if they are added after the\n    // `run` method is called.\n    add: function(callback, contextOverride) {\n      var promise = _.result(this._deferred, 'promise');\n\n      this._callbacks.push({cb: callback, ctx: contextOverride});\n\n      promise.then(function(args) {\n        if (contextOverride) { args.context = contextOverride; }\n        callback.call(args.context, args.options);\n      });\n    },\n\n    // Run all registered callbacks with the context specified.\n    // Additional callbacks can be added after this has been run\n    // and they will still be executed.\n    run: function(options, context) {\n      this._deferred.resolve({\n        options: options,\n        context: context\n      });\n    },\n\n    // Resets the list of callbacks to be run, allowing the same list\n    // to be run multiple times - whenever the `run` method is called.\n    reset: function() {\n      var callbacks = this._callbacks;\n      this._deferred = Marionette.Deferred();\n      this._callbacks = [];\n\n      _.each(callbacks, function(cb) {\n        this.add(cb.cb, cb.ctx);\n      }, this);\n    }\n  });\n\n  // A simple module system, used to create privacy and encapsulation in\n  // Marionette applications\n  Marionette.Module = function(moduleName, app, options) {\n    Marionette.deprecate('Marionette.module is deprecated and removed in v3.');\n\n    this.moduleName = moduleName;\n    this.options = _.extend({}, this.options, options);\n    // Allow for a user to overide the initialize\n    // for a given module instance.\n    this.initialize = options.initialize || this.initialize;\n\n    // Set up an internal store for sub-modules.\n    this.submodules = {};\n\n    this._setupInitializersAndFinalizers();\n\n    // Set an internal reference to the app\n    // within a module.\n    this.app = app;\n\n    if (_.isFunction(this.initialize)) {\n      this.initialize(moduleName, app, this.options);\n    }\n  };\n\n  Marionette.Module.extend = Marionette.extend;\n\n  // Extend the Module prototype with events / listenTo, so that the module\n  // can be used as an event aggregator or pub/sub.\n  _.extend(Marionette.Module.prototype, Backbone.Events, {\n\n    // By default modules start with their parents.\n    startWithParent: true,\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic when extending Marionette.Module.\n    initialize: function() {},\n\n    // Initializer for a specific module. Initializers are run when the\n    // module's `start` method is called.\n    addInitializer: function(callback) {\n      this._initializerCallbacks.add(callback);\n    },\n\n    // Finalizers are run when a module is stopped. They are used to teardown\n    // and finalize any variables, references, events and other code that the\n    // module had set up.\n    addFinalizer: function(callback) {\n      this._finalizerCallbacks.add(callback);\n    },\n\n    // Start the module, and run all of its initializers\n    start: function(options) {\n      // Prevent re-starting a module that is already started\n      if (this._isInitialized) { return; }\n\n      // start the sub-modules (depth-first hierarchy)\n      _.each(this.submodules, function(mod) {\n        // check to see if we should start the sub-module with this parent\n        if (mod.startWithParent) {\n          mod.start(options);\n        }\n      });\n\n      // run the callbacks to \"start\" the current module\n      this.triggerMethod('before:start', options);\n\n      this._initializerCallbacks.run(options, this);\n      this._isInitialized = true;\n\n      this.triggerMethod('start', options);\n    },\n\n    // Stop this module by running its finalizers and then stop all of\n    // the sub-modules for this module\n    stop: function() {\n      // if we are not initialized, don't bother finalizing\n      if (!this._isInitialized) { return; }\n      this._isInitialized = false;\n\n      this.triggerMethod('before:stop');\n\n      // stop the sub-modules; depth-first, to make sure the\n      // sub-modules are stopped / finalized before parents\n      _.invoke(this.submodules, 'stop');\n\n      // run the finalizers\n      this._finalizerCallbacks.run(undefined, this);\n\n      // reset the initializers and finalizers\n      this._initializerCallbacks.reset();\n      this._finalizerCallbacks.reset();\n\n      this.triggerMethod('stop');\n    },\n\n    // Configure the module with a definition function and any custom args\n    // that are to be passed in to the definition function\n    addDefinition: function(moduleDefinition, customArgs) {\n      this._runModuleDefinition(moduleDefinition, customArgs);\n    },\n\n    // Internal method: run the module definition function with the correct\n    // arguments\n    _runModuleDefinition: function(definition, customArgs) {\n      // If there is no definition short circut the method.\n      if (!definition) { return; }\n\n      // build the correct list of arguments for the module definition\n      var args = _.flatten([\n        this,\n        this.app,\n        Backbone,\n        Marionette,\n        Backbone.$, _,\n        customArgs\n      ]);\n\n      definition.apply(this, args);\n    },\n\n    // Internal method: set up new copies of initializers and finalizers.\n    // Calling this method will wipe out all existing initializers and\n    // finalizers.\n    _setupInitializersAndFinalizers: function() {\n      this._initializerCallbacks = new Marionette.Callbacks();\n      this._finalizerCallbacks = new Marionette.Callbacks();\n    },\n\n    // import the `triggerMethod` to trigger events with corresponding\n    // methods if the method exists\n    triggerMethod: function(...args) { return Marionette.triggerMethod.apply(this, [this].concat(args)); }\n  });\n\n  // Class methods to create modules\n  _.extend(Marionette.Module, {\n\n    // Create a module, hanging off the app parameter as the parent object.\n    create: function(app, moduleNames, moduleDefinition) {\n      var module = app;\n\n      // get the custom args passed in after the module definition and\n      // get rid of the module name and definition function\n      var customArgs = _.drop(arguments, 3);\n\n      // Split the module names and get the number of submodules.\n      // i.e. an example module name of `Doge.Wow.Amaze` would\n      // then have the potential for 3 module definitions.\n      moduleNames = moduleNames.split('.');\n      var length = moduleNames.length;\n\n      // store the module definition for the last module in the chain\n      var moduleDefinitions = [];\n      moduleDefinitions[length - 1] = moduleDefinition;\n\n      // Loop through all the parts of the module definition\n      _.each(moduleNames, function(moduleName, i) {\n        var parentModule = module;\n        module = this._getModule(parentModule, moduleName, app, moduleDefinition);\n        this._addModuleDefinition(parentModule, module, moduleDefinitions[i], customArgs);\n      }, this);\n\n      // Return the last module in the definition chain\n      return module;\n    },\n\n    _getModule: function(parentModule, moduleName, app, def, args) {\n      var options = _.extend({}, def);\n      var ModuleClass = this.getClass(def);\n\n      // Get an existing module of this name if we have one\n      var module = parentModule[moduleName];\n\n      if (!module) {\n        // Create a new module if we don't have one\n        module = new ModuleClass(moduleName, app, options);\n        parentModule[moduleName] = module;\n        // store the module on the parent\n        parentModule.submodules[moduleName] = module;\n      }\n\n      return module;\n    },\n\n    // ## Module Classes\n    //\n    // Module classes can be used as an alternative to the define pattern.\n    // The extend function of a Module is identical to the extend functions\n    // on other Backbone and Marionette classes.\n    // This allows module lifecyle events like `onStart` and `onStop` to be called directly.\n    getClass: function(moduleDefinition) {\n      var ModuleClass = Marionette.Module;\n\n      if (!moduleDefinition) {\n        return ModuleClass;\n      }\n\n      // If all of the module's functionality is defined inside its class,\n      // then the class can be passed in directly. `MyApp.module(\"Foo\", FooModule)`.\n      if (moduleDefinition.prototype instanceof ModuleClass) {\n        return moduleDefinition;\n      }\n\n      return moduleDefinition.moduleClass || ModuleClass;\n    },\n\n    // Add the module definition and add a startWithParent initializer function.\n    // This is complicated because module definitions are heavily overloaded\n    // and support an anonymous function, module class, or options object\n    _addModuleDefinition: function(parentModule, module, def, args) {\n      var fn = this._getDefine(def);\n      var startWithParent = this._getStartWithParent(def, module);\n\n      if (fn) {\n        module.addDefinition(fn, args);\n      }\n\n      this._addStartWithParent(parentModule, module, startWithParent);\n    },\n\n    _getStartWithParent: function(def, module) {\n      var swp;\n\n      if (_.isFunction(def) && (def.prototype instanceof Marionette.Module)) {\n        swp = module.constructor.prototype.startWithParent;\n        return _.isUndefined(swp) ? true : swp;\n      }\n\n      if (_.isObject(def)) {\n        swp = def.startWithParent;\n        return _.isUndefined(swp) ? true : swp;\n      }\n\n      return true;\n    },\n\n    _getDefine: function(def) {\n      if (_.isFunction(def) && !(def.prototype instanceof Marionette.Module)) {\n        return def;\n      }\n\n      if (_.isObject(def)) {\n        return def.define;\n      }\n\n      return null;\n    },\n\n    _addStartWithParent: function(parentModule, module, startWithParent) {\n      module.startWithParent = module.startWithParent && startWithParent;\n\n      if (!module.startWithParent || !!module.startWithParentIsConfigured) {\n        return;\n      }\n\n      module.startWithParentIsConfigured = true;\n\n      parentModule.addInitializer(function(options) {\n        if (module.startWithParent) {\n          module.start(options);\n        }\n      });\n    }\n  });\n\n}\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\n\nexport default function() {\n\n  var normalizeUIString = function(uiString, ui) {\n    return uiString.replace(/@ui\\.[a-zA-Z-_$0-9]*/g, function(r) {\n      return ui[r.slice(4)];\n    });\n  };\n\n  Marionette.normalizeUIString = function(uiString, ui) {\n    Marionette.deprecate('normalizeUIString was removed in v3.');\n    return normalizeUIString.apply(this, arguments);\n  };\n\n  var normalizeUIKeys = function(hash, ui) {\n    return _.reduce(hash, function(memo, val, key) {\n      var normalizedKey = normalizeUIString(key, ui);\n      memo[normalizedKey] = val;\n      return memo;\n    }, {});\n  };\n\n  Marionette.normalizeUIKeys = function(hash, ui) {\n    Marionette.deprecate('normalizeUIKeys was removed in v3.');\n    return normalizeUIKeys.apply(this, arguments);\n  };\n\n  var normalizeUIValues = function(hash, ui, properties) {\n    _.each(hash, function(val, key) {\n      if (_.isString(val)) {\n        hash[key] = normalizeUIString(val, ui);\n      } else if (_.isObject(val) && _.isArray(properties)) {\n        _.extend(val, normalizeUIValues(_.pick(val, properties), ui));\n        /* Value is an object, and we got an array of embedded property names to normalize. */\n        _.each(properties, function(property) {\n          var propertyVal = val[property];\n          if (_.isString(propertyVal)) {\n            val[property] = normalizeUIString(propertyVal, ui);\n          }\n        });\n      }\n    });\n    return hash;\n  };\n\n  Marionette.normalizeUIValues = function(hash, ui, properties) {\n    Marionette.deprecate('normalizeUIValues was removed in v3.');\n    return normalizeUIValues.apply(this, arguments);\n  };\n\n}\n","import Marionette from 'backbone.marionette';\n\nexport default function() {\n  Marionette.proxyGetOption = function(optionName) {\n    Marionette.deprecate('proxyGetOption has been deprecated and removed in v3.');\n    return Marionette.getOption(this, optionName);\n  };\n\n  Marionette.proxyBindEntityEvents = function(entity, bindings) {\n    Marionette.deprecate('proxyBindEntityEvents has been deprecated and removed in v3.');\n    return Marionette.bindEvents(this, entity, bindings);\n  };\n\n  Marionette.proxyUnbindEntityEvents = function(entity, bindings) {\n    Marionette.deprecate('proxyUnbindEntityEvents has been deprecated and removed in v3.');\n    return Marionette.unbindEvents(this, entity, bindings);\n  };\n}\n","import Marionette from 'backbone.marionette';\n\nexport default function() {\n\n  const originalShow = Marionette.Region.prototype.show;\n\n  Marionette.Region = Marionette.Region.extend({\n    attachView(view) {\n      Marionette.deprecate('Region#attachView was removed in v3. Use Region#show without fear of re-rendering.')\n      if (this.currentView) {\n        delete this.currentView._parent;\n      }\n      view._parent = this;\n      this.currentView = view;\n      return this;\n    },\n    show(view, options) {\n      if (!this._ensureElement(options)) {\n        return;\n      }\n      this._ensureView(view);\n      if (view === this.currentView) { return this; }\n      var isChangingView = !!this.currentView;\n      if (isChangingView) {\n        this.triggerMethod('before:swapOut', this.currentView, this, options);\n        this.triggerMethod('before:swap', view, this, options);\n        this.triggerMethod('swapOut', this.currentView, this, options);\n      }\n      originalShow.apply(this, arguments);\n      if (isChangingView) {\n        this.triggerMethod('swap', view, this, options);\n      }\n      return this;\n    },\n  });\n}\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\n\nexport default function() {\n\n   // Manage one or more related `Marionette.Region` objects.\n  Marionette.RegionManager = Marionette.Object.extend({\n    constructor: function(options) {\n      this._regions = {};\n      this.length = 0;\n\n      Marionette.Object.call(this, options);\n\n      this.addRegions(this.getOption('regions'));\n    },\n\n    // Add multiple regions using an object literal or a\n    // function that returns an object literal, where\n    // each key becomes the region name, and each value is\n    // the region definition.\n    addRegions: function(regionDefinitions, defaults) {\n      regionDefinitions = Marionette._getValue(regionDefinitions, this, arguments);\n\n      if (!_.isEmpty(regionDefinitions)) {\n        Marionette.deprecate('RegionManager is deprecated and removed in v3.');\n      }\n\n      return _.reduce(regionDefinitions, function(regions, definition, name) {\n        if (_.isString(definition)) {\n          definition = {selector: definition};\n        }\n        if (definition.selector) {\n          definition = _.defaults({}, definition, defaults);\n        }\n\n        regions[name] = this.addRegion(name, definition);\n        return regions;\n      }, {}, this);\n    },\n\n    // Add an individual region to the region manager,\n    // and return the region instance\n    addRegion: function(name, definition) {\n      var region;\n\n      if (definition instanceof Marionette.Region) {\n        region = definition;\n      } else {\n        region = Marionette.Region.buildRegion(definition, Marionette.Region);\n      }\n\n      this.triggerMethod('before:add:region', name, region);\n\n      region._parent = this;\n      this._store(name, region);\n\n      this.triggerMethod('add:region', name, region);\n      return region;\n    },\n\n    // Get a region by name\n    get: function(name) {\n      return this._regions[name];\n    },\n\n    // Gets all the regions contained within\n    // the `regionManager` instance.\n    getRegions: function() {\n      return _.clone(this._regions);\n    },\n\n    // Remove a region by name\n    removeRegion: function(name) {\n      var region = this._regions[name];\n      this._remove(name, region);\n\n      return region;\n    },\n\n    // Empty all regions in the region manager, and\n    // remove them\n    removeRegions: function() {\n      var regions = this.getRegions();\n      _.each(this._regions, function(region, name) {\n        this._remove(name, region);\n      }, this);\n\n      return regions;\n    },\n\n    // Empty all regions in the region manager, but\n    // leave them attached\n    emptyRegions: function() {\n      var regions = this.getRegions();\n      _.invoke(regions, 'empty');\n      return regions;\n    },\n\n    // Destroy all regions and shut down the region\n    // manager entirely\n    destroy: function() {\n      this.removeRegions();\n      return Marionette.Object.prototype.destroy.apply(this, arguments);\n    },\n\n    // internal method to store regions\n    _store: function(name, region) {\n      if (!this._regions[name]) {\n        this.length++;\n      }\n\n      this._regions[name] = region;\n    },\n\n    // internal method to remove a region\n    _remove: function(name, region) {\n      this.triggerMethod('before:remove:region', name, region);\n      region.empty();\n      region.stopListening();\n\n      delete region._parent;\n      delete this._regions[name];\n      this.length--;\n      this.triggerMethod('remove:region', name, region);\n    }\n  });\n\n  // Mix in methods from Underscore, for iteration, and other\n  // collection related features.\n  // Borrowing this code from Backbone.Collection:\n  // http://backbonejs.org/docs/backbone.html#section-121\n  var _actAsCollection = function(object, listProperty) {\n    var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter',\n      'select', 'reject', 'every', 'all', 'some', 'any', 'include',\n      'contains', 'invoke', 'toArray', 'first', 'initial', 'rest',\n      'last', 'without', 'isEmpty', 'pluck'];\n\n    _.each(methods, function(method) {\n      object[method] = function() {\n        var list = _.values(_.result(this, listProperty));\n        var args = [list].concat(_.toArray(arguments));\n        return _[method].apply(_, args);\n      };\n    });\n  };\n\n  Marionette.actAsCollection = function(object, listProperty) {\n    Marionette.deprecate('actAsCollection is deprecated and removed in v3.');\n\n    return _actAsCollection.apply(this, arguments);\n  }\n\n  _actAsCollection(Marionette.RegionManager.prototype, '_regions');\n\n}\n","import _ from 'underscore';\nimport Backbone from 'backbone';\nimport Marionette from 'backbone.marionette';\n\nexport default function() {\n\n  function dep() {\n    Marionette.deprecate('Show events are no longer triggered on the View.  User render or attach.');\n  }\n\n  var regionTriggerMethod = Marionette.Region.prototype.triggerMethod;\n\n  Marionette.Region.prototype.triggerMethod = function(name, region, view, options) {\n    var result;\n    if (name === 'before:show' || name === 'show') {\n      result = regionTriggerMethod.call(this, name, view, region, options);\n      if (!view._isShown) { Marionette.triggerMethodOn(view, name, view, region, options); }\n      if (name === 'show') { view._isShown = true; }\n      if (view.children) {\n        view.children.each(function(v) {\n          if (!v._isShown) { Marionette.triggerMethodOn(v, name, v); }\n          if (name === 'show') { v._isShown = true; }\n        });\n      }\n    } else {\n      result = regionTriggerMethod.apply(this, arguments);\n    }\n\n    return result;\n  };\n\n  var _addChildView = Marionette.CollectionView.prototype._addChildView;\n\n  Marionette.CollectionView.prototype._addChildView = function(view) {\n    _addChildView.apply(this, arguments);\n    if (this._isShown) {\n      if (!view._isShown) {\n        Marionette.triggerMethodOn(view, 'before:show', view); Marionette.triggerMethodOn(view, 'show', view);\n      }\n      view._isShown = true;\n    }\n  };\n\n\n  // split the event name on the \":\"\n  var splitter = /(^|:)(\\w)/gi;\n\n  // take the event section (\"section1:section2:section3\")\n  // and turn it in to uppercase name onSection1Section2Section3\n  function getEventName(match, prefix, eventName) {\n    return eventName.toUpperCase();\n  }\n\n  var trigger = Backbone.Events.trigger;\n\n  Backbone.Events.trigger = function(name) {\n    var isView = this.prototype instanceof Backbone.View || this === Backbone.View;\n    var isRegion = this.prototype instanceof Marionette.Region || this === Marionette.Region;\n    if (isView || isRegion) {\n      var methodName = 'on' + name.replace(splitter, getEventName);\n      var method = (this.options && this.options[methodName]) || this[methodName];\n\n      if (_.isFunction(method)) {\n        if (isView) {\n          dep();\n        } else {\n          if (method.length > 1) {\n            Marionette.deprecate('Region show events in v3 pass the region and the 1st argument and the view as the 2nd');\n          }\n        }\n      }\n\n      if (!this._events) { return this; }\n\n      if ((name === 'before:show' || name === 'show') && this._events[name]) {\n        if (isView) {\n          dep();\n        } else {\n          if (this._events[name].length > 1) {\n            Marionette.deprecate('Region show events in v3 pass the region and the 1st argument and the view as the 2nd');\n          }\n        }\n      }\n    }\n\n    return trigger.apply(this, arguments);\n  }\n}\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\n\nexport default function() {\n\n  function dep() {\n    Marionette.deprecate('Regions attached to the Application are deprecated. Application now only has a single region.');\n  }\n\n  const originalConstructor = Marionette.Application.prototype.constructor;\n\n  Marionette.Application = Marionette.Application.extend({\n    constructor: function(options) {\n      this._initializeRegions(options);\n      originalConstructor.apply(this, arguments);\n    },\n\n    // Add regions to your app.\n    // Accepts a hash of named strings or Region objects\n    // addRegions({something: \"#someRegion\"})\n    // addRegions({something: Region.extend({el: \"#someRegion\"}) });\n    addRegions: function(regions) {\n      return this._regionManager.addRegions(regions);\n    },\n\n    // Empty all regions in the app, without removing them\n    emptyRegions: function() {\n      return this._regionManager.emptyRegions();\n    },\n\n    // Removes a region from your app, by name\n    // Accepts the regions name\n    // removeRegion('myRegion')\n    removeRegion: function(region) {\n      return this._regionManager.removeRegion(region);\n    },\n\n    // Provides alternative access to regions\n    // Accepts the region name\n    // getRegion('main')\n    getRegion: function(region) {\n      if (arguments.length) {\n        dep();\n        return this._regionManager.get(region);\n      }\n\n      return this._region;\n    },\n\n    // Get all the regions from the region manager\n    getRegions: function() {\n      return this._regionManager.getRegions();\n    },\n\n    // Enable easy overriding of the default `RegionManager`\n    // for customized region interactions and business-specific\n    // view logic for better control over single regions.\n    getRegionManager: function() {\n      return new Marionette.RegionManager();\n    },\n\n    // Internal method to initialize the regions that have been defined in a\n    // `regions` attribute on the application instance\n    _initializeRegions: function(options = {}) {\n      var regions = _.isFunction(this.regions) ? this.regions(options) : this.regions || {};\n\n      // Enable users to define `regions` in instance options.\n      var optionRegions = (options.options && options.options.regions) || options.regions;\n\n      // Enable region options to be a function\n      if (_.isFunction(optionRegions)) {\n        optionRegions = optionRegions.call(this, options);\n      }\n\n      // Overwrite current regions with those passed in options\n      _.extend(regions, optionRegions);\n\n      this._initRegionManager();\n\n      if (!_.isEmpty(regions)) {\n        dep();\n\n        this.addRegions(regions);\n      }\n\n      return this;\n    },\n\n    // Internal method to set up the region manager\n    _initRegionManager: function() {\n      this._regionManager = this.getRegionManager();\n      this._regionManager._parent = this;\n\n      this.listenTo(this._regionManager, 'before:add:region', function(name, region) {\n        this.triggerMethod('before:add:region', name, region);\n      });\n\n      this.listenTo(this._regionManager, 'add:region', function(name, region) {\n        this[name] = region;\n        this.triggerMethod('add:region', name, region);\n      });\n\n      this.listenTo(this._regionManager, 'before:remove:region', function(name, region) {\n        this.triggerMethod('before:remove:region', name, region);\n      });\n\n      this.listenTo(this._regionManager, 'remove:region', function(name, region) {\n        delete this[name];\n        this.triggerMethod('remove:region', name, region);\n      });\n    }\n  })\n\n}\n","import _ from 'underscore';\nimport Backbone from 'backbone';\nimport Marionette from 'backbone.marionette';\n\nexport default function() {\n\n  function dep() {\n    Marionette.deprecate('Regions attached to the view are deprecated. Use View#getRegion or View#showChildView');\n  }\n\n  function _addRegion(view, name, region) {\n    const regionShow = region.show;\n    const regionEmpty = region.empty;\n    const regionReset = region.reset;\n    const regionOn = region.on;\n\n    const newRegion = _.extend({}, region, {\n      on() {\n        dep();\n        regionOn.apply(this, arguments);\n      },\n      show() {\n        dep();\n        regionShow.apply(this, arguments);\n      },\n      empty() {\n        dep();\n        regionEmpty.apply(this, arguments);\n      },\n      reset() {\n        dep();\n        regionReset.apply(this, arguments);\n      },\n      __deprecatedRegion: true\n    });\n\n    view[name] = newRegion;\n  }\n\n  function _removeRegion(view, name, region) {\n    delete view[name];\n  }\n\n  const listenTo = Backbone.View.prototype.listenTo;\n\n  Backbone.View.prototype.listenTo = function(obj) {\n    if (obj.__deprecatedRegion) { dep(); }\n    listenTo.apply(this, arguments);\n  }\n\n  const initRegions = Marionette.View.prototype._initRegions;\n\n  _.extend(Marionette.View.prototype, {\n    _initRegions() {\n      this.regionClass = Marionette.Region;\n      this.on({\n        'add:region': _addRegion,\n        'remove:region': _removeRegion\n      });\n      initRegions.apply(this, arguments);\n    }\n  });\n}\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\n\nexport default function() {\n\n  _.extend(Marionette.Region, {\n\n    buildRegion: function(regionConfig, DefaultRegionClass) {\n\n      Marionette.deprecate('Region Static Options are deprecated and removed in v3.');\n\n      if (_.isString(regionConfig)) {\n        return this._buildRegionFromSelector(regionConfig, DefaultRegionClass);\n      }\n\n      if (regionConfig.selector || regionConfig.el || regionConfig.regionClass) {\n        return this._buildRegionFromObject(regionConfig, DefaultRegionClass);\n      }\n\n      if (_.isFunction(regionConfig)) {\n        return this._buildRegionFromRegionClass(regionConfig);\n      }\n\n      throw new Marionette.Error({\n        message: 'Improper region configuration type.',\n        url: 'marionette.region.html#region-configuration-types'\n      });\n    },\n\n    // Build the region from a string selector like '#foo-region'\n    _buildRegionFromSelector: function(selector, DefaultRegionClass) {\n      return new DefaultRegionClass({el: selector});\n    },\n\n    // Build the region from a configuration object\n    // ```js\n    // { selector: '#foo', regionClass: FooRegion, allowMissingEl: false }\n    // ```\n    _buildRegionFromObject: function(regionConfig, DefaultRegionClass) {\n      var RegionClass = regionConfig.regionClass || DefaultRegionClass;\n      var options = _.omit(regionConfig, 'selector', 'regionClass');\n\n      if (regionConfig.selector && !options.el) {\n        options.el = regionConfig.selector;\n      }\n\n      return new RegionClass(options);\n    },\n\n    // Build the region directly from a given `RegionClass`\n    _buildRegionFromRegionClass: function(RegionClass) {\n      return new RegionClass();\n    }\n  });\n\n}\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\n\nexport default function() {\n  function mixinTemplateContext(target = {}) {\n    if (this.templateHelpers || this.options.templateHelpers) {\n      Marionette.deprecate('templateHelpers are deprecated. Use templateContext');\n      this.mergeOptions(this.options, ['templateHelpers']);\n      const templateHelpers = _.result(this, 'templateHelpers');\n      return _.extend(target, templateHelpers);\n    }\n\n    const templateContext = _.result(this, 'templateContext');\n    return _.extend(target, templateContext);\n  }\n\n  function mixinTemplateHelpers() {\n    Marionette.deprecate('mixinTemplateHelpers was renamed mixinTemplateContext in v3.');\n    mixinTemplateContext.apply(this, arguments);\n  }\n\n  _.extend(Marionette.View.prototype, {\n    mixinTemplateContext,\n    mixinTemplateHelpers\n  });\n\n  _.extend(Marionette.CompositeView.prototype, {\n    mixinTemplateContext,\n    mixinTemplateHelpers\n  });\n}\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\n\nexport default function() {\n\n  // split the event name on the \":\"\n  var splitter = /(^|:)(\\w)/gi;\n\n  // take the event section (\"section1:section2:section3\")\n  // and turn it in to uppercase name onSection1Section2Section3\n  function getEventName(match, prefix, eventName) {\n    return eventName.toUpperCase();\n  }\n\n  const triggerParent = Marionette.View.prototype._triggerEventOnParentLayout;\n\n  function _triggerEventOnParentLayout(eventName, ...args) {\n    const layoutView = this._parentView();\n    if (!layoutView) { return; }\n\n    args = args || [];\n\n    const eventPrefix = _.result(layoutView, 'childViewEventPrefix');\n    const prefixedEventName = eventPrefix + ':' + eventName;\n\n    var methodName = 'on' + prefixedEventName.replace(splitter, getEventName);\n    var method = (layoutView.options && layoutView.options[methodName]) || layoutView[methodName];\n\n    // If this is true we expect that it is expecting `this`\n    // as its first argument\n    if ((_.isFunction(method) && method.length) === args.length + 1 ||\n        (layoutView._events && layoutView._events[prefixedEventName] && layoutView._events[prefixedEventName].length) === args.length + 1) {\n      args = [this].concat(args);\n      Marionette.deprecate('The triggering view is no longer prepended on to the arguments of proxied child events.');\n    }\n\n    return triggerParent.apply(this, [eventName].concat(args));\n  }\n\n  _.extend(Marionette.View.prototype, {\n    _triggerEventOnParentLayout\n  });\n\n  _.extend(Marionette.CompositeView.prototype, {\n    _triggerEventOnParentLayout\n  });\n}\n","import Marionette from 'backbone.marionette';\nimport _ from 'underscore';\n\nexport default function() {\n\n  const originalConstructor = Marionette.View.prototype.constructor;\n\n  Marionette.View = Marionette.View.extend({\n    constructor(options) {\n      const args = Array.prototype.slice.call(arguments);\n\n      if (_.isFunction(options)) {\n        Marionette.deprecate('Marionette.View options is no longer supported as a function. Please use an object instead.');\n        options = options();\n        args[0] = options;\n      }\n\n\n      originalConstructor.apply(this, args);\n    },\n\n  });\n};\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\n\nimport ApplicationWreqr from './ApplicationWreqr';\nimport bindEntityEvents from './bindEntityEvents';\nimport childEvents from './childEvents';\nimport CollectionView from './CollectionView';\nimport CompositeView from './CompositeView';\nimport Controller from './Controller';\nimport deprecatedEvents from './deprecatedEvents';\nimport getChildView from './getChildView';\nimport ItemView from './ItemView';\nimport LayoutView from './LayoutView';\nimport Module from './Module';\nimport normalizeUi from './normalizeUi';\nimport proxyFunctions from './proxyFunctions';\nimport Region from './Region';\nimport RegionManager from './RegionManager';\nimport RegionShowEvent from './RegionShowEvent';\nimport regionsOnApplication from './regionsOnApplication';\nimport regionsOnView from './regionsOnView';\nimport RegionStaticMethods from './RegionStaticMethods';\nimport templateHelpers from './templateHelpers';\nimport triggerProxy from './triggerProxy';\nimport viewOptions from './viewOptions';\n\nMarionette.DEV_MODE = true;\nMarionette.VERSION = 'marionette-v3-compat';\n\n// Add a console.trace to the deprecate message\nMarionette.deprecate._warn = function() {\n  const warn = Marionette.deprecate._console.warn || Marionette.deprecate._console.log || function() {};\n  console.trace();\n  return warn.apply(Marionette.deprecate._console, arguments);\n};\n\nMarionette._getValue = function(value, context, params) {\n  if (_.isFunction(value)) {\n    value = params ? value.apply(context, params) : value.call(context);\n  }\n  return value;\n};\n\nexport default function(opts = {}) {\n  const patches = _.extend({\n    ApplicationWreqr,\n    bindEntityEvents,\n    childEvents,\n    CollectionView,\n    CompositeView,\n    Controller,\n    deprecatedEvents,\n    getChildView,\n    ItemView,\n    LayoutView,\n    Module,\n    normalizeUi,\n    proxyFunctions,\n    Region,\n    RegionManager,\n    RegionShowEvent,\n    regionsOnApplication,\n    regionsOnView,\n    RegionStaticMethods,\n    templateHelpers,\n    triggerProxy,\n    viewOptions\n  }, opts);\n\n  _.mapObject(patches, function(patch) {\n    if (_.isFunction(patch)) {\n      patch();\n    }\n  });\n}\n"],"sourceRoot":"/source/"}